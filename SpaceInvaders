#!/usr/bin/env perl6
use lib 'blib/lib';
use Steroids;

class Main is Steroids::State {
    has $!player;
    has @!invaders;
    has $!bullets_alive = 0;

    method create {
        self.load_bitmap('background', 'assets/background.png');
        self.add_sprite('background', 0, 0);
        self.load_spritesheet('spaceship', 'assets/spaceship.png', 72, 72, 4);
        self.load_spritesheet('invader', 'assets/invader.png', 72, 32, 7);
        self.load_spritesheet('explosion', 'assets/boom.png', 128, 128, 64);
        self.load_bitmap('laser', 'assets/laser.png');
        $!player = self.add_sprite('spaceship', 0, 0);
        $!player.y = self.height - 108;
        $!player.x = Int(self.width/2 - 36);

        for ^20 -> $n {
            my $row = Int($n / 7);
            my $col = $n % 7;
            my $invader = self.add_sprite('invader', 72 + $col * 144, $row * 64);
            $invader.when({ $_.velocity[0] != 0 and ($_.x <= 0 or $_.x + $_.w >= self.width) }, {
                $_.velocity = [0, 8];
                $_.y += 8;
            });
            $invader.when({ $_.velocity[1] > 0 and $_.y %% $_.h }, {
                $_.velocity = [-8, 0];
                $_.velocity[0] = 8 if $_.x <= 0;
            });
            $invader.when({ $_.y >= self.height }, {
                say "You have failed. The earth as you know it is gone :(";
                self.change_state('menu');
            });
            $invader.velocity = [0, 8];
            self.add_animation($invader, Any, 200, True);
            @!invaders.push: $invader;
        }

        self.add_animation($!player, Any, 200, True);
    }

    method fire {
        my $bullet = self.add_sprite('laser', $!player.x, $!player.y);
        $bullet.x += Int($!player.w/2 - $bullet.w/2);
        $bullet.velocity = [0, -15];
        for @!invaders -> $invader {
            $bullet.when({ .collides_with($invader) }, {
                my $exp = self.add_sprite('explosion',
                    Int($invader.x + $invader.w/2),
                    Int($invader.y + $invader.h/2));
                $exp.x -= Int($exp.w/2);
                $exp.y -= Int($exp.h * 2/3);
                my $anim = self.add_animation($exp, Any, 20, False);
                $invader.velocity = [0, 0];
                $exp.when({ $anim.finished }, {
                    self.remove_sprite($exp);
                    self.remove_sprite($invader);
                    @!invaders.=grep(* !=== $invader);
                });
                self.remove_sprite($bullet);
                $!bullets_alive--;
            });
        }
        $bullet.when({ .y + .h < 0 }, {
            self.remove_sprite($bullet);
            $!bullets_alive--;
        });
        $!bullets_alive++;
    }

    method keypressed($k) {
        if $k eq any("Up", "Space") {
            self.fire
        }
        if $k eq "Escape" {
            self.paused = !self.paused;
        }
    }

    method gamepad($e) {
        return unless $e.type eq 'button_down';
        if $e.button eq 'A' {
            self.fire
        } elsif $e.button eq 'START' {
            self.paused = !self.paused;
        } elsif $e.button eq 'BACK' {
            self.change_state('menu');
        }
    }

    method update($dt) {
        my $pad = self.gamepads[0];
        my $analog = $pad.analog_percentage($pad.analog_left_x);

        if self.is_pressed("Left") or $pad.dpad_position("Left") {
            $!player.x -= 15;
        } elsif self.is_pressed("Right") or $pad.dpad_position("Right") {
            $!player.x += 15;
        } elsif $analog.abs > 0.1 {
            $!player.x += Int(15 * $analog);
        }

        if $!player.x < 0 {
            $!player.x = 0
        } elsif $!player.x + $!player.w > self.width {
            $!player.x = self.width - $!player.w
        }

        unless @!invaders {
            say "Congratulations, you held off the attack!";
            self.change_state('menu');
        }
    }
}

class Menu is Steroids::State {
    method create {
        self.load_font('default', 'assets/font.ttf', 48);
        self.load_bitmap('xb_start', 'assets/xb_start.png');
        self.load_bitmap('xb_back', 'assets/xb_back.png');
        self.load_bitmap('background', 'assets/background.png');
        self.add_sprite('background', 0, 0);
        my $t = self.add_text('(S)tart a new game', 'default', Steroids::Colour.white,
                              Int(self.width/2), Int(self.height/2) - 40);
        $t.y -= $t.h;
        $t.x -= Int($t.w/2);
        my $b = self.add_sprite('xb_start', $t.x + $t.w + 20, $t.y);
        $b.y -= Int($b.h/2);
        $t = self.add_text('(Q)uit', 'default', Steroids::Colour.white,
                           Int(self.width/2), Int(self.height/2) + 40);
        $t.x -= Int($t.w/2);
        $b = self.add_sprite('xb_back', $t.x + $t.w + 20, $t.y);
        $b.y -= Int($b.h/2);
    }

    method keypressed($k) {
        if $k eq 'S' {
            self.reset_state('main');
            self.change_state('main');
        } elsif $k eq 'Q' {
            self.quit;
        }
    }

    method gamepad($e) {
        return unless $e.type eq 'button_down';
        if $e.button eq 'START' {
            self.reset_state('main');
            self.change_state('main');
        } elsif $e.button eq 'BACK' {
            self.quit;
        }
    }

    method update($dt) {
    }
}

given Steroids::Game.new {
    .add_state('menu', { Menu.new });
    .add_state('main', { Main.new });
    .change_state('menu');
    .start;
}
